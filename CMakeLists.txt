CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT("RST")

SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)

# --- global definitions ---

SET(RST_VERSION_MAJOR "0")
SET(RST_VERSION_MINOR "4")
SET(RST_VERSION_PATCH "0")
SET(RST_VERSION "${RST_VERSION_MAJOR}.${RST_VERSION_MINOR}.${RST_VERSION_PATCH}")

# --- dependency handling ---

FIND_PACKAGE(RSC REQUIRED)
SET(CMAKE_MODULE_PATH ${CMAKE_INSTALL_PREFIX}/share/cmake/Modules ${CMAKE_MODULE_PATH} ${RSC_CMAKE_MODULE_PATH})

FIND_PACKAGE(ProtocolBuffers REQUIRED)
IF(NOT PROTOBUF_LIBRARY)
    MESSAGE(FATAL_ERROR "protobuf library not found")
ENDIF()
IF(NOT PROTOBUF_PROTOC_EXECUTABLE)
    MESSAGE(FATAL_ERROR "protoc executable not found")
ENDIF()

# --- protocol files ---

FILE(GLOB_RECURSE STABLE_PROTOS_REL
     RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}"
     "${CMAKE_CURRENT_SOURCE_DIR}/proto/stable/[^.]*.proto")
SET(STABLE_PROTOS)
FOREACH(FILE ${STABLE_PROTOS_REL})
    GET_FILENAME_COMPONENT(ABS_FILE ${FILE} ABSOLUTE)
    LIST(APPEND STABLE_PROTOS ${ABS_FILE})
ENDFOREACH()
FILE(GLOB_RECURSE SANDBOX_PROTOS_REL
     RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}"
     "${CMAKE_CURRENT_SOURCE_DIR}/proto/sandbox/[^.]*.proto")
SET(SANDBOX_PROTOS)
FOREACH(FILE ${SANDBOX_PROTOS_REL})
    GET_FILENAME_COMPONENT(ABS_FILE ${FILE} ABSOLUTE)
    LIST(APPEND SANDBOX_PROTOS ${ABS_FILE})
ENDFOREACH()

MESSAGE(STATUS "stable protos: ${STABLE_PROTOS}")
MESSAGE(STATUS "sandbox protos: ${SANDBOX_PROTOS}")

SET(STABLE_ROOT "${CMAKE_SOURCE_DIR}/proto/stable")
SET(SANDBOX_ROOT "${CMAKE_SOURCE_DIR}/proto/sandbox")

# --- language bindings ---

ADD_SUBDIRECTORY(cpp)
ADD_SUBDIRECTORY(java)
ADD_SUBDIRECTORY(python)

# --- install protocol anyways for backwards compatibility ---

ADD_SUBDIRECTORY(proto)

## --- package ---
#SET(CPACK_GENERATOR "STGZ;TGZ;TZ")
#SET(CPACK_PACKAGE_VENDOR "CoR-Lab Bielefeld University")
#SET(CPACK_PACKAGE_VERSION_MAJOR ${RST_VERSION_MAJOR})
#SET(CPACK_PACKAGE_VERSION_MINOR ${RST_VERSION_MINOR})
#SET(CPACK_PACKAGE_VERSION_PATCH ${RST_VERSION_PATCH})
#SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")
#
#IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
#    SET(CPACK_GENERATOR "${CPACK_GENERATOR};DEB")
#    SET(CPACK_DEBIAN_PACKAGE_VERSION ${RST_VERSION_MAJOR}.${RST_VERSION_MINOR}.${RST_VERSION_PATCH})
#    SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Sebastian Wrede (swrede@techfak.uni-bielefeld.de)")
#    SET(CPACK_DEBIAN_PACKAGE_DESCRIPTION "Type specifications for Robotics and Cognitive Systems specified in Google Protocol Buffer's IDL format.")
#    SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
#    SET(CPACK_DEBIAN_PACKAGE_SECTION "devel")
#    SET(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
#    SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libprotoc-dev, protobuf-compiler, cmake-data, cmake")
#    SET(CPACK_DEBIAN_PACKAGE_SUGGESTS "python-setuptools, python-dev")
#ENDIF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
#
#INCLUDE(CPack)
