CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT("RST")

SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)

# --- global definitions ---

SET(CPP_NAME "rst")
SET(RST_VERSION_MAJOR "0")
SET(RST_VERSION_MINOR "2")
SET(RST_VERSION_PATCH "0")
SET(RST_VERSION "${RST_VERSION_MAJOR}.${RST_VERSION_MINOR}.${RST_VERSION_PATCH}")

# --- dependency handling ---

FIND_PACKAGE(RSC REQUIRED)
SET(CMAKE_MODULE_PATH ${CMAKE_INSTALL_PREFIX}/share/cmake/Modules ${CMAKE_MODULE_PATH} ${RSC_CMAKE_MODULE_PATH})

FIND_PACKAGE(ProtocolBuffers REQUIRED)
IF(NOT PROTOBUF_PROTOC_EXECUTABLE)
    MESSAGE(FATAL_ERROR "protoc executable not found")
ENDIF()

# --- protocol ---

SET(PROTO_FILES 
  rst/ImageProcessing.proto
  rst/SoundProcessing.proto
  rst/XOPData.proto
)

# --- make absolute paths from PROTO_FILES ---
FOREACH(FILE ${PROTO_FILES})
    GET_FILENAME_COMPONENT(ABS_FILE ${FILE} ABSOLUTE)
	 SET(RSTFILES ${RSTFILES} ${ABS_FILE})
ENDFOREACH()

ADD_SUBDIRECTORY(cpp)
ADD_SUBDIRECTORY(java)
ADD_SUBDIRECTORY(python)

# --- install protocol anyways for backwards compatibility ---

MACRO(INSTALL_FILES_WITH_DIRECTORY FILE_LIST)

    FOREACH(HEADER ${${FILE_LIST}})
        STRING(REGEX MATCH "(.*)[/\\]" DIR ${HEADER})
        INSTALL(FILES ${HEADER} DESTINATION share/RST/${DIR})
    ENDFOREACH(HEADER)

ENDMACRO()

INSTALL_FILES_WITH_DIRECTORY(RSTFILES)

# --- cmake configuration file ---

# decide on export macros
IF(WIN32)
    SET(RST_CFLAGS "/DRST_EXPORT=__declspec(dllimport)")
ELSE()
    SET(RST_CFLAGS "-DRST_EXPORT=")
ENDIF()

SET(LIB_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})
IF(CMAKE_LINK_LIBRARY_SUFFIX)
    SET(LIB_SUFFIX ${CMAKE_LINK_LIBRARY_SUFFIX})
ENDIF()
CONFIGURE_FILE(RSTConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/RSTConfig.cmake @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/RSTConfig.cmake DESTINATION share/RST)

# --- package ---

SET(CPACK_PACKAGE_VENDOR "CoR-Lab Bielefeld University")
SET(CPACK_PACKAGE_VERSION_MAJOR ${RST_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${RST_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${RST_VERSION_PATCH})
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")

INCLUDE(CPack)
