package rst.communicationpatterns;

option java_outer_classname = "TaskStateType";

/**
 * TODO
 *
 * @author TODO
 */
message TaskState {
    enum State {
        // Initial task submission:
        // Applicable in states: none (since initial submission)

        /**
         * Client submits specification with INITIATED state. Server
         * accepts or rejects task and publishes specification with
         * ACCEPTED or REJECTED state accordingly.
         */
        INITIATED                = 0;


        /**
         * TODO
         */
        ACCEPTED                 = 1;

        /**
         * TODO
         */
        REJECTED                 = 2;

        // Updated of an accepted task:
        // Applicable in states: ACCEPTED

        /**
         * Client publishes (modified) specification with UPDATE
         * state.  Server accepts or rejects the update and publishes
         * specification with ACCEPTED or UPDATE_REJECTED state
         * accordingly.
         */
        UPDATE             = 3;

        /**
         * See UPDATE.
         */
        UPDATE_REJECTED    = 4;

        // Aborting an accepted task:
        // Applicable in states: ACCEPTED

        /**
         * TODO
         */
        ABORT                = 5;

        /**
         * TODO
         */
        ABORTED              = 6;

        /**
         * TODO
         */
        ABORT_FAILED         = 7;

        // Final states.

        /**
         * TODO
         */
        RESULT_AVAILABLE = 8;

        /**
         * TODO
         */
        COMPLETED        = 9;

        /**
         * TODO
         */
        FAILED           = 10;
    }

    /**
     * TODO
     */
    enum Origin {

        /**
         * TODO
         */
        SUBMITTER = 0;

        /**
         * TODO
         */
        HANDLER   = 1;
    }

    /**
     * TODO
     */
    required Origin origin         = 1;

    /**
     * TODO
     */
    required State    state        = 2;

    /**
     * TODO
     */
    required uint32 serial         = 3;

    /**
     * Type of the payload blob. This field and the payload field are
     * intended to be processed by a (de)serialization mechanism that
     * decodes/encodes the payload blob according to the type
     * information in wireSchema.
     */
    required bytes    wire_schema = 4;

    /**
     * See wire_schema field.
     */
    required bytes    payload     = 5;
}
