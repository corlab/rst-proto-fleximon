
GET_FILENAME_COMPONENT(RST_CONFIG_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

# interface to raw protocol files
SET(RST_STABLE_PROTO_ROOT ${CONFIG_DIR}/proto/stable)
SET(RST_SANDBOX_PROTO_ROOT ${CONFIG_DIR}/proto/sandbox)
SET(RST_STABLE_PROTOS)
FOREACH(F @STABLE_PROTOS_REL@)
    LIST(APPEND RST_STABLE_PROTOS "${RST_CONFIG_DIR}/${F}")
ENDFOREACH()
SET(RST_SANDBOX_PROTOS)
FOREACH(F @SANDBOX_PROTOS_REL@)
    LIST(APPEND RST_SANDBOX_PROTOS "${RST_CONFIG_DIR}/${F}")
ENDFOREACH()

# determine whether sandbox is required
SET(USE_SANDBOX FALSE)
FOREACH(COMPONENT ${RST_FIND_COMPONENTS})
    IF(COMPONENT STREQUAL "sandbox")
        SET(USE_SANDBOX TRUE)
    ELSE()
        MESSAGE(SEND_ERROR "Unknown component ${COMPONENT} requested")
    ENDIF()
ENDFOREACH()

IF(NOT RST_CONFIG_PROCESSED)
    SET(RST_CONFIG_PROCESSED TRUE)

    SET(RSC_DIR "@RSC_DIR@" CACHE PATH "RSC location")
    FIND_PACKAGE(RSC REQUIRED)
    SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${RSC_CMAKE_MODULE_PATH}")

    SET(PROTOBUF_ROOT "@PROTOBUF_ROOT@" CACHE PATH "Protobuf location")
    FIND_PACKAGE(ProtocolBuffers REQUIRED)
    IF(NOT PROTOBUF_LIBRARY)
        MESSAGE(FATAL_ERROR "protobuf library not found")
    ENDIF()

    SET(RST_INCLUDE_DIRS "${RST_CONFIG_DIR}/../../include/rst/stable" ${RSC_INCLUDE_DIRS} ${PROTOBUF_INCLUDE_DIR})
    SET(RST_RUNTIME_LIBRARY_DIRS "${RST_CONFIG_DIR}/../../bin" ${RSC_RUNTIME_LIBRARY_DIRS} ${PROTOBUF_RUNTIME_LIBRARY_DIRS})

    # Expose rst library as an imported target (from the point of view
    # of the downstream project)
    INCLUDE("${RST_CONFIG_DIR}/RSTDepends.cmake")
    SET(RST_LIBRARIES @STABLE_NAME@)
    SET(RST_CFLAGS "@RST_CFLAGS@")

    # sandbox additions
    IF(USE_SANDBOX)
        LIST(APPEND RST_INCLUDE_DIRS "${RST_CONFIG_DIR}/../../include/rst/sandbox")
        LIST(APPEND RST_LIBRARIES @SANDBOX_NAME@)
    ENDIF()

    SET(RST_VERSION @RST_VERSION@)
ENDIF()
